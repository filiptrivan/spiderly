# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET CLI Test

on:
  workflow_dispatch : #manual trigger on deployment


jobs:
  build:

    runs-on: windows-latest


    steps:
     - name: Checkout repository
       uses: actions/checkout@v3

      # Setup .NET
     - name: Setup .NET
       uses: actions/setup-dotnet@v3
       with:
        dotnet-version: '9.0.x'

     - name: Restore .NET dependencies
       run: dotnet restore Spiderly.CLI/Spiderly.CLI.csproj

     - name: Build .NET project
       run: |
         dotnet build Spiderly.CLI/Spiderly.CLI.csproj
     - name: Install SQL Server Express
       shell: powershell
       run: |
        Write-Host "Shell Path: $PSVersionTable"

        if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
          Write-Host "Chocolatey not found - installing..."
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        } else {
          Write-Host "Chocolatey found"
        }

        choco --version

        choco install sql-server-express -y

        Start-Service MSSQL`$SQLEXPRESS
        Write-Host "SQL Server Express installation complete."


     - name: Start SQL Server Express
       run: |
          Start-Service MSSQL`$SQLEXPRESS
       shell: powershell
      
     - name: Pack, install, and run Spiderly CLI with inputs
       shell: powershell
       run: |
            # Uninstall existing global tool (ignore errors if not installed)
            dotnet tool uninstall --global Spiderly.CLI -ErrorAction SilentlyContinue
        
            # Pack the project (adjust path if needed)
            dotnet pack Spiderly.CLI/Spiderly.CLI.csproj -o ./nupkg
        
            # Install the tool globally from the local nupkg folder
            dotnet tool install --global Spiderly.CLI --add-source ./nupkg
        
            # Simulate interactive input for 'spider init'
            $inputs = @(
              "test"       # Enter file name
              "default"    # Enter template
            ) -join "`r`n"
        
            # Run spider init with the simulated input
            $inputs | spider init
